##############################################
#Author: GoogleThink
#Mail:goooglethink@gmail.com
#Last modified:2018-01-03 14:27
#Filename:.zshrc
#Description:
##############################################

#Setting zsh defualt terminal
#chsh -s /bin/zsh

# source <fileName>     立即生效

# -----------Functions-------------
# <Esc> <Esc>           快速添加sudo
# lscolors              显示终端所有颜色
# google                google搜索
# bing                  bing搜索
# hr                    输入一条分割线

# -----------Ctrl shortcut-------------

# ctrl+f	            在提示区域右移光标
# ctrl+b	            在提示区域右移光标
# ctrl+n	            在提示区域右移光标
# ctrl+p	            在提示区域右移光标

# Alt+f  	            在终端输入按单词前移（右向）
# Alt+b  	            在终端输入按单词后移（左向）

# ctrl+a	            移到命令行首
# ctrl+e	            移到命令行尾

# ctrl+l	            清屏
# ctrl+c	            终止

# ctrl+k	            从光标处删除至命令行尾
# ctrl+u	            从光标处删除至命令行首
# Alt+d  	            从光标处删除至字尾
# ctrl+d	            删除光标处的字符
# ctrl+h	            删除光标前的字符
# alt+d		            删除当前光标到临近右边单词开始
# arl+w		            删除此处到左边的单词

# ctrl+d 	            关闭终端

# -----------Plugins shortcut-------------

# ESC twice   		Puts sudo in front of the current command

#========================================================================================================
#========================================================================================================
# Basic Settings
#========================================================================================================
export ZSH=$HOME/.oh-my-zsh
ZSH_THEME="xiong-chiamiov-plus"
plugins=(command-not-found docker sudo git history web-search)
source $ZSH/oh-my-zsh.sh
#========================================================================================================

#========================================================================================================
#========================================================================================================
# History
#========================================================================================================
#关于历史纪录的配置 {{{
#历史纪录条目数量
export HISTSIZE=10000
#注销后保存的历史纪录条目数量
export SAVEHIST=10000
#历史纪录文件
#export HISTFILE=~/.zhistory
#以附加的方式写入历史纪录
setopt INC_APPEND_HISTORY
#如果连续输入的命令相同，历史纪录中只保留一个
setopt HIST_IGNORE_DUPS
#为历史纪录中的命令添加时间戳
setopt EXTENDED_HISTORY

#启用 cd 命令的历史纪录，cd -[TAB]进入历史路径
setopt AUTO_PUSHD
#相同的历史路径只保留一个
setopt PUSHD_IGNORE_DUPS

#在命令前添加空格，不将此命令添加到纪录文件中
#setopt HIST_IGNORE_SPACE
#}}}

#使用 histall 命令查看全部历史纪录
function histall { convhistory =(allhistory) |
            sed '/^.\{20\} *cd/i\\' }
#使用 hist 查看当前目录历史纪录
function hist { convhistory $HISTFILE }


#杂项 {{{
#允许在交互模式中使用注释  例如：
#cmd #这是注释
setopt INTERACTIVE_COMMENTS

#扩展路径
#/v/c/p/p => /var/cache/pacman/pkg
setopt complete_in_word

#禁用 core dumps
limit coredumpsize 0

#Emacs风格 键绑定
bindkey -e
#设置 [DEL]键 为向后删除
bindkey "\e[3~" delete-char

#以下字符视为单词的一部分
WORDCHARS='*?_-[]~=&;!#$%^(){}<>'
#}}}
#========================================================================================================

#========================================================================================================
#========================================================================================================
# Automatic perfect
#========================================================================================================
#自动补全功能 {{{
setopt AUTO_LIST
setopt AUTO_MENU
#开启此选项，补全时会直接选中菜单项
#setopt MENU_COMPLETE

autoload -U compinit
compinit

#自动补全选项
zstyle ':completion:*' verbose yes
zstyle ':completion:*' menu select
zstyle ':completion:*:*:default' force-list always
zstyle ':completion:*' select-prompt '%SSelect:  lines: %L  matches: %M  [%p]'

zstyle ':completion:*:match:*' original only
zstyle ':completion::prefix-1:*' completer _complete
zstyle ':completion:predict:*' completer _complete
zstyle ':completion:incremental:*' completer _complete _correct
zstyle ':completion:*' completer _complete _prefix _correct _prefix _match _approximate

#路径补全
zstyle ':completion:*' expand 'yes'
zstyle ':completion:*' squeeze-shlashes 'yes'
zstyle ':completion::complete:*' '\\'

#彩色补全菜单
eval $(dircolors -b)
export ZLSCOLORS="${LS_COLORS}"
zmodload zsh/complist
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ":completion:*:kill:*" command "ps -u $USER -o pid,%cpu,tty,cputime,cmd"

#修正大小写
zstyle ":completion:*" matcher-list "" "m:{a-z}={A-Z}" "m:{a-zA-Z}={A-Za-z}" "r:|[._-]=* r:|=* l:|=*"
#错误校正
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

#kill 命令补全
compdef pkill=kill
compdef pkill=killall
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:*:*:processes' force-list always
zstyle ':completion:*:processes' command 'ps -au$USER'

#补全类型提示分组
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:descriptions' format $'\e[01;33m -- %d --\e[0m'
zstyle ':completion:*:messages' format $'\e[01;35m -- %d --\e[0m'
zstyle ':completion:*:warnings' format $'\e[01;31m -- No Matches Found --\e[0m'
zstyle ':completion:*:corrections' format $'\e[01;32m -- %d (errors: %e) --\e[0m'

# cd ~ 补全顺序
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
#}}}

##空行(光标在行首)补全 "cd " {{{
user-complete(){
    case $BUFFER in
        "" )                       # 空行填入 "cd "
            BUFFER="cd "
            zle end-of-line
            zle expand-or-complete
            ;;
        "cd --" )                  # "cd --" 替换为 "cd +"
            BUFFER="cd +"
            zle end-of-line
            zle expand-or-complete
            ;;
        "cd +-" )                  # "cd +-" 替换为 "cd -"
            BUFFER="cd -"
            zle end-of-line
            zle expand-or-complete
            ;;
        * )
            zle expand-or-complete
            ;;
    esac
}
zle -N user-complete
bindkey "\t" user-complete
#}}}
#========================================================================================================

#========================================================================================================
#Extensions Functions
#========================================================================================================
##在命令前插入 sudo
sudo-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    [[ $BUFFER != sudo\ * ]] && BUFFER="sudo $BUFFER"
    zle end-of-line                 #光标移动到行末
}
zle -N sudo-command-line
#定义快捷键为： [Esc] [Esc]
bindkey "\e\e" sudo-command-line

# display a list of supported colors
function lscolors {
	((cols = $COLUMNS - 4))
	s=$(printf %${cols}s)
	for i in {000..$(tput colors)}; do
		echo -e $i $(tput setaf $i; tput setab $i)${s// /=}$(tput op);
	done
}

# open a web browser on search website for a query
function seach {
	xdg-open "https://www.google.com/search?q=`urlencode "${(j: :)@}"`"
	xdg-open "https://www.bing.com/search?q=`urlencode "${(j: :)@}"`"
}

# print a separator banner, as wide as the terminal
function hr {
	print ${(l:COLUMNS::=:)}
}

#========================================================================================================

#========================================================================================================
#========================================================================================================
#Configure
#========================================================================================================
# 行编辑高亮模式
# Ctrl+@ 设置标记，标记和光标点之间为 region
zle_highlight=(region:bg=magenta #选中区域
               special:bold      #特殊字符
               isearch:underline)#搜索时使用的关键字

# 启动shell时自动启动tmux
if [[ -z "$TMUX" ]] ;then
    ID="`tmux ls | grep -vm1 attached | cut -d: -f1`" # get the id of a deattached session
    if [[ -z "$ID" ]] ;then # if not available create a new one
        tmux new-session
    else
        tmux attach-session -t "$ID" # if available attach to it
    fi
fi
#========================================================================================================

#========================================================================================================
#========================================================================================================
# Alias
#========================================================================================================
# Basic Command
alias vi='vim'
alias sv='sdcv'
alias rm='rm -rf'
alias cat='lolcat'
alias ll='ls -alF'
alias la='ls -A'
alias chmod777='sudo chmod 777'
alias showallpackages='sudo dpkg --get-selections'

# Aptitude Command
alias aepurge='sudo aptitude purge'
alias aeinstall='sudo aptitude install'
alias aeproxy='sudo aptitude -o Acquire::http::proxy=http://127.0.0.1:9666'

# User Password
alias sudo='echo "google" | sudo -S'

# History Command top10
alias top10='print -l  ${(o)history%% *} | uniq -c | sort -nr | head -n 10'

# System update
alias update='echo "google" | sudo -S su -c "aptitude update"'
alias upgrade='echo "google" | sudo -S su -c "aptitude upgrade -y"'
alias dist-upgrade='echo "google" | sudo -S su -c "aptitude dist-upgrade -y"'

# System clean and remove
alias autoremove='echo "google" | sudo -S su -c "apt-get autoremove -y"'
alias autoclean='echo "google" | sudo -S su -c "aptitude autoclean" && sudo su -c "aptitude clean"'
alias autocleanremove='echo "google" | sudo -S su -c "aptitude autoclean" && sudo su -c "aptitude clean" && sudo su -c "apt-get autoremove" && sudo su -c "apt-get autoclean" && sudo su -c "apt-get clean"'
alias orphanedpackages='sudo deborphan && hr && deborphan --guess-data'

# Shell script
alias root='bash ~/code/ShellCode/suroot.sh'
alias sshme='bash ~/code/ShellCode/ssh.sh'
alias mytools='bash ~/code/start.sh'
alias aboutpc='bash ~/code/ShellCode/AboutPC.sh'
alias cleanorphanedpackages='bash ~/code/ShellCode/Deborphan.sh'

# Start up ultrasurf
alias ultrasurf='sudo chmod 777 ~/Applications/ultrasurf && ~/Applications/ultrasurf'
alias freegate='wine ~/Applications/freegate.exe'

# Power
alias powerrestart='sudo shutdown -r now'
alias poweroff='sudo shutdown -P now'

# Tmux
alias txnew='tmux new -s session'
alias txkill='tmux kill-server'
alias txlist='tmux list-sessions'

#Docker alias
alias drstop='docker container stop'
alias drstopAll='docker container stop $(docker ps -a -q)'
alias drrm='docker container rm -f'
alias drrmAll='docker container rm $(docker ps -a -q)'
alias drrmi='docker image rm -f'
alias drps='docker container ps -a'
alias drimages='docker images'
alias drsystemdf='docker system df'
alias drinfo='docker info'
alias drlogs='docker container logs -f'
alias drdaemon='echo "google" | sudo -S systemctl daemon-reload && sudo systemctl restart docker'

#Docker-compose alias
alias dcversion='docker-compose version'
alias dcstop='docker-compose stop'
alias dcup='docker-compose up -d'
alias dcdown='docker-compose down'
alias dclogs='docker-compose logs -f'
alias dcrecreate='docker-compose up --force-recreate -d'

#Flatpak alias
alias fklist='flatpak list'
alias fkuninstall='flatpak uninstall '

#========================================================================================================
echo -e "\033[36m                                                    \033[1m"
echo -e "\033[36m ██████╗  ██████╗  ██████╗  ██████╗ ██╗     ███████╗\033[1m"
echo -e "\033[36m██╔════╝ ██╔═══██╗██╔═══██╗██╔════╝ ██║     ██╔════╝\033[1m"
echo -e "\033[36m██║  ███╗██║   ██║██║   ██║██║  ███╗██║     █████╗  \033[1m"
echo -e "\033[36m██║   ██║██║   ██║██║   ██║██║   ██║██║     ██╔══╝  \033[1m"
echo -e "\033[36m╚██████╔╝╚██████╔╝╚██████╔╝╚██████╔╝███████╗███████ \033[1m"
echo -e "\033[36m ╚═════╝  ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝╚══════╝\033[1m"
echo -e "\033[36m                                                    \033[1m"
