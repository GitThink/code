Docker镜像和容器的默认存放位置为:/var/lib/docker

#docker添加官方加速器
sudo gedit /etc/systemd/system/multi-user.target.wants/docker.service
ExecStart=/usr/bin/dockerd --registry-mirror=https://registry.docker-cn.com
sudo systemctl daemon-reload
sudo systemctl restart docker
sudo ps -ef | grep dockerd
#===========================================================================================
# install dependencies 4 cert
sudo apt-get install apt-transport-https
sudo apt-get install ca-certificates
sudo apt-get install gnupg2
sudo apt-get install curl
sudo apt-get install software-properties-common
sudo apt-get install lsb-release

# add Docker repo gpg key(官方源)
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
echo "deb https://download.docker.com/linux/debian stretch stable" >> /etc/apt/sources.list

# install Docker
sudo apt-get install docker-ce -y

# manage Docker as a non-root user,建立docker组并将当前用户加入docker组:
sudo groupadd docker
sudo usermod -aG docker $USER
sudo usermod -aG docker google

# configure Docker to start on boot
sudo systemctl enable docker
sudo systemctl start docker
#===========================================================================================
# 检查是否安装好docker
docker info

#version
docker version 

#获取镜像
docker pull [选项] [Docker Registry地址]<仓库名>:<标签>
docker pull kalilinux/kali-linux-docker
docker pull kent72/lantern

#启动一个bash终端,允许用户进行交互
docker run -it  --rm kalilinux/kali-linux-docker bash
docker run -t -i kalilinux/kali-linux-docker /bin/bash
-it : 开启交互式操作及终端
-t : 选项让Docker分配一个伪终端(pseudo-tty)并绑定到容器的标准输入上
-i : 则让容器的标准输入保持打开
--rm : 容器退出后随之将其删除,不需要排障和保留结果,可以避免浪费空间

#查看当前系统版本的命令
cat /etc/os-release

#退出容器
exit

#列出已经下载下来的镜像
docker images

#显示包括中间层镜像在内的所有镜像
docker images -a

#列出所有的虚悬镜像的 ID
docker images -q

#列出特定的某个镜像,也就是说指定仓库名和标签
docker images kalilinux/kali-linux-docker 

#列出镜像结果,并且只包含镜像ID和仓库名
docker images --format "{{.ID}}: {{.Repository}}"

#列出无标签镜像
docker images -f dangling=true

#虚悬镜像已经失去了存在的价值,是可以随意删除的,用下面的命令删除
docker rmi $(docker images -q -f dangling=true)

#获取容器的输出信息
sudo docker logs [container ID or NAMES]
docker logs [container ID or NAMES]

#通过docker inspect来查看相关的数据：
docker inspect [container ID or NAMES]

#启动容器
docker start [container ID or NAMES]
#监听所有运行着的容器
docker ps -a
#停止容器
docker stop [container ID or NAMES]
#停止所有的container ID
docker stop $(docker ps -a -q)
#删除一个或多个容器
docker rm [container ID or NAMES]
#删除所有container ID
docker rm $(docker ps -a -q)
#删除数据容器
docker rm -v public_provider

#宿主机于容器的数据传输
docker cp [container ID]:/mnt/start.sh /home/google/code/ 
docker cp /home/google/code [container ID]:/mnt

#添加一个数据卷
docker run -it -v /data kalilinux/kali-linux-docker /bin/bash
-v : 给容器添加一个数据卷

#启动容器同时配置挂载点,挂载宿主文件夹到数据卷容器
docker run -it -v /home/google/Public/:/data kalilinux/kali-linux-docker /bin/bash 
docker run -d  -v /home/google/Public/:/data --name public_provider kalilinux/kali-linux-docker 
注意：--rm 和 -d不能共用！

#创建一个带有命名容器来共享数据
docker run -d  -v /data --name public_provider kalilinux/kali-linux-docker 
-d : 容器会在后台运行并不会把输出的结果打印到宿主机上面(输出结果可以用docker logs 查看),启动后会返回一个唯一的 id

#--volumes-from标记挂载/data卷
docker run -it --volumes-from public_provider --name provider_one kalilinux/kali-linux-docker
--volumes-from : 就是从另一个容器当中挂载容器中已经创建好的数据卷

atttach用法
docker attach [container ID or NAMES]

#端口映射与外部访问容器(-p : 指定端口、IP地址绑定,可以被多次使用，以绑定多个容器端口)
docker run -it --name kali_port -p ip:hostPort:containerPort kalilinux/kali-linux-docker 
docker run -it --name kali_port -p ip::containerPort kalilinux/kali-linux-docker 
docker run -it --name kali_port -p hostPort:containerPort kalilinux/kali-linux-docker 
docker run -d -p 8787:8787 --name lantern kent72/lantern

#查看容器指定端口的绑定情况
docker port [container ID or NAMES]

#创建网络
docker network create my_network
#查看网络情况
docker network inspect my_network
docker network ls
创建容器并连接到网络(--network : 指定容器要使用的网络)
docker run -it --name nettest --network=my_network kalilinux/kali-linux-docker 
#创建交互式容器(同一网络中的容器是可以互相访问的)
docker run -it --name web --network=my_network kalilinux/kali-linux-docker /bin/bash 
#将已有容器连接到Docker网络 
docker network connect my_network [container ID or NAMES]
#断开网络与网络删除(注意：删除网络时，需要已断开所容器的连接，否则会删除失败)
docker network disconnect my_network [container ID or NAMES]
docker network rm my_network

#使用Macvlan构建Docker网络(macvlan是kernel的模块名)
docker network create -d macvlan --subnet=192.168.43.0/24 --gateway=192.168.43.1 -o parent=wlan0 kali_net
--subnet: 指定网段(宿主机) --gateway: 指定网关(宿主机) parent: 注定父网卡(宿主机)
#创建使用容器
docker run --net=kali_net --ip=192.168.43.39 -it --name test1 kalilinux/kali-linux-docker
--net 指定使用的网络,--ip 用于指定网段内 IP;


