##############################################
#Author: GoogleThink
#Mail:goooglethink@gmail.com
#Last modified:2017-11-03 23:09
#Filename:.zshrc
#Description:
##############################################

# source <fileName>     立即生效

# -----------Functions-------------
# <Esc> <Esc>           快速添加sudo

# lscolors              显示终端所有颜色

# google                google搜索
# baidu                 baidu搜索
# bing                  bing搜索
# yahoo                 yahoo搜索
# yandex                yandex搜索

# hr                    输入一条分割线

# myip                  显示个人ip地址

# -----------Ctrl shortcut-------------

# ctrl+f	            在提示区域右移光标
# ctrl+b	            在提示区域右移光标
# ctrl+n	            在提示区域右移光标
# ctrl+p	            在提示区域右移光标

# Alt+f  	            在终端输入按单词前移（右向）
# Alt+b  	            在终端输入按单词后移（左向）

# ctrl+a	            移到命令行首
# ctrl+e	            移到命令行尾

# ctrl+l	            清屏
# ctrl+c	            终止

# ctrl+k	            从光标处删除至命令行尾
# ctrl+u	            从光标处删除至命令行首
# Alt+d  	            从光标处删除至字尾
# ctrl+d	            删除光标处的字符
# ctrl+h	            删除光标前的字符
# alt+d		            删除当前光标到临近右边单词开始
# rl+w		            删除此处到左边的单词

# ctrl+d 	            关闭终端


# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
#隐藏固定的 user@hostname 信息
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="xiong-chiamiov-plus"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git wd web-search history history-substring-search extract z)
#来源
source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
#========================================================================================================
#========================================================================================================
# History
#========================================================================================================
#关于历史纪录的配置 {{{
#历史纪录条目数量
export HISTSIZE=10000
#注销后保存的历史纪录条目数量
export SAVEHIST=10000
#历史纪录文件
#export HISTFILE=~/.zhistory
#以附加的方式写入历史纪录
setopt INC_APPEND_HISTORY
#如果连续输入的命令相同，历史纪录中只保留一个
setopt HIST_IGNORE_DUPS
#为历史纪录中的命令添加时间戳
setopt EXTENDED_HISTORY

#启用 cd 命令的历史纪录，cd -[TAB]进入历史路径
setopt AUTO_PUSHD
#相同的历史路径只保留一个
setopt PUSHD_IGNORE_DUPS

#在命令前添加空格，不将此命令添加到纪录文件中
#setopt HIST_IGNORE_SPACE
#}}}

#使用 histall 命令查看全部历史纪录
function histall { convhistory =(allhistory) |
            sed '/^.\{20\} *cd/i\\' }
#使用 hist 查看当前目录历史纪录
function hist { convhistory $HISTFILE }


#杂项 {{{
#允许在交互模式中使用注释  例如：
#cmd #这是注释
setopt INTERACTIVE_COMMENTS

#扩展路径
#/v/c/p/p => /var/cache/pacman/pkg
setopt complete_in_word

#禁用 core dumps
limit coredumpsize 0

#Emacs风格 键绑定
bindkey -e
#设置 [DEL]键 为向后删除
bindkey "\e[3~" delete-char

#以下字符视为单词的一部分
WORDCHARS='*?_-[]~=&;!#$%^(){}<>'
#}}}
#========================================================================================================
#自动补全功能 {{{
setopt AUTO_LIST
setopt AUTO_MENU
#开启此选项，补全时会直接选中菜单项
#setopt MENU_COMPLETE

autoload -U compinit
compinit

#自动补全选项
zstyle ':completion:*' verbose yes
zstyle ':completion:*' menu select
zstyle ':completion:*:*:default' force-list always
zstyle ':completion:*' select-prompt '%SSelect:  lines: %L  matches: %M  [%p]'

zstyle ':completion:*:match:*' original only
zstyle ':completion::prefix-1:*' completer _complete
zstyle ':completion:predict:*' completer _complete
zstyle ':completion:incremental:*' completer _complete _correct
zstyle ':completion:*' completer _complete _prefix _correct _prefix _match _approximate

#路径补全
zstyle ':completion:*' expand 'yes'
zstyle ':completion:*' squeeze-shlashes 'yes'
zstyle ':completion::complete:*' '\\'

#彩色补全菜单
eval $(dircolors -b)
export ZLSCOLORS="${LS_COLORS}"
zmodload zsh/complist
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ":completion:*:kill:*" command "ps -u $USER -o pid,%cpu,tty,cputime,cmd"

#修正大小写
zstyle ":completion:*" matcher-list "" "m:{a-z}={A-Z}" "m:{a-zA-Z}={A-Za-z}" "r:|[._-]=* r:|=* l:|=*"
#错误校正
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

#kill 命令补全
compdef pkill=kill
compdef pkill=killall
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:*:*:processes' force-list always
zstyle ':completion:*:processes' command 'ps -au$USER'

#补全类型提示分组
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:descriptions' format $'\e[01;33m -- %d --\e[0m'
zstyle ':completion:*:messages' format $'\e[01;35m -- %d --\e[0m'
zstyle ':completion:*:warnings' format $'\e[01;31m -- No Matches Found --\e[0m'
zstyle ':completion:*:corrections' format $'\e[01;32m -- %d (errors: %e) --\e[0m'

# cd ~ 补全顺序
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
#}}}

##空行(光标在行首)补全 "cd " {{{
user-complete(){
    case $BUFFER in
        "" )                       # 空行填入 "cd "
            BUFFER="cd "
            zle end-of-line
            zle expand-or-complete
            ;;
        "cd --" )                  # "cd --" 替换为 "cd +"
            BUFFER="cd +"
            zle end-of-line
            zle expand-or-complete
            ;;
        "cd +-" )                  # "cd +-" 替换为 "cd -"
            BUFFER="cd -"
            zle end-of-line
            zle expand-or-complete
            ;;
        * )
            zle expand-or-complete
            ;;
    esac
}
zle -N user-complete
bindkey "\t" user-complete
#}}}

#========================================================================================================

#========================================================================================================
#Extensions Functions
#========================================================================================================
##在命令前插入 sudo
sudo-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    [[ $BUFFER != sudo\ * ]] && BUFFER="sudo $BUFFER"
    zle end-of-line                 #光标移动到行末
}
zle -N sudo-command-line
#定义快捷键为： [Esc] [Esc]
bindkey "\e\e" sudo-command-line

# display a list of supported colors
function lscolors {
	((cols = $COLUMNS - 4))
	s=$(printf %${cols}s)
	for i in {000..$(tput colors)}; do
		echo -e $i $(tput setaf $i; tput setab $i)${s// /=}$(tput op);
	done
}

# open a web browser on search website for a query
function seach {
	xdg-open "https://www.google.com/search?q=`urlencode "${(j: :)@}"`"
	xdg-open "https://www.baidu.com/search?q=`urlencode "${(j: :)@}"`"
	xdg-open "https://www.bing.com/search?q=`urlencode "${(j: :)@}"`"
	xdg-open "https://search.yahoo.com/search?q=`urlencode "${(j: :)@}"`"
	xdg-open "https://www.yandex.com/search?q=`urlencode "${(j: :)@}"`"
}

# print a separator banner, as wide as the terminal
function hr {
	print ${(l:COLUMNS::=:)}
}

# get public ip
function myip {
	local api
	case "$1" in
		"-4")
			api="http://v4.ipv6-test.com/api/myip.php"
			;;
		"-6")
			api="http://v6.ipv6-test.com/api/myip.php"
			;;
		*)
			api="http://ipv6-test.com/api/myip.php"
			;;
	esac
	curl -s "$api"
	echo # Newline.
}

# docker functions
function docker-enter() {
    #if [ -e $(dirname "$0")/nsenter ]; then
    #Change for centos bash running
    if [ -e $(dirname '$0')/nsenter ]; then
        # with boot2docker, nsenter is not in the PATH but it is in the same folder
        NSENTER=$(dirname "$0")/nsenter
    else
        # if nsenter has already been installed with path notified, here will be clarified
        NSENTER=$(which nsenter)
        #NSENTER=nsenter
    fi
    [ -z "$NSENTER" ] && echo "WARN Cannot find nsenter" && return

    if [ -z "$1" ]; then
        echo "Usage: `basename "$0"` CONTAINER [COMMAND [ARG]...]"
        echo ""
        echo "Enters the Docker CONTAINER and executes the specified COMMAND."
        echo "If COMMAND is not specified, runs an interactive shell in CONTAINER."
    else
        PID=$(sudo docker inspect --format "{{.State.Pid}}" "$1")
        if [ -z "$PID" ]; then
            echo "WARN Cannot find the given container"
            return
        fi
        shift

        OPTS="--target $PID --mount --uts --ipc --net --pid"

        if [ -z "$1" ]; then
            # No command given.
            # Use su to clear all host environment variables except for TERM,
            # initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,
            # and start a login shell.
            #sudo $NSENTER "$OPTS" su - root
            sudo $NSENTER --target $PID --mount --uts --ipc --net --pid su - root
        else
            # Use env to clear all host environment variables.
            sudo $NSENTER --target $PID --mount --uts --ipc --net --pid env -i $@
        fi
    fi
}

#========================================================================================================

#========================================================================================================
#Configure
#========================================================================================================
# 行编辑高亮模式
# Ctrl+@ 设置标记，标记和光标点之间为 region
zle_highlight=(region:bg=magenta #选中区域
               special:bold      #特殊字符
               isearch:underline)#搜索时使用的关键字

# 启动shell时自动启动tmux
if [[ -z "$TMUX" ]] ;then
    ID="`tmux ls | grep -vm1 attached | cut -d: -f1`" # get the id of a deattached session
    if [[ -z "$ID" ]] ;then # if not available create a new one
        tmux new-session
    else
        tmux attach-session -t "$ID" # if available attach to it
    fi
fi

#========================================================================================================

#========================================================================================================
# Alias
#========================================================================================================
# Command Alias
alias -g cp='cp -i'
alias -g mv='mv -i'
alias -g rm='rm -i'
alias -g ll='ls -l'
alias -g grep='grep --color=auto'
alias -g ee='emacsclient -t'

# User Password
alias sudo='echo "google" | sudo -S'

# History Command top10
alias top10='print -l  ${(o)history%% *} | uniq -c | sort -nr | head -n 10'

# [Esc][h] man 当前命令时，显示简短说明
alias run-help >&/dev/null && unalias run-help
autoload run-help

# System update
alias update='echo "google" | sudo -S aptitude update'
alias upgrade='echo "google" | sudo -S aptitude upgrade -y'
alias dist-upgrade='echo "google" | sudo -S aptitude dist-upgrade'
alias dist-updategrade='echo "google" | sudo -S aptitude update && sudo aptitude upgrade && sudo aptitude dist-upgrade'

# Shell script
alias root='bash ~/code/ShellCode/suroot.sh'
alias goproxy='bash ~/code/Network/start.sh'
alias sshme='bash ~/code/ShellCode/ssh.sh'
alias mytools='bash ~/code/start.sh'
alias pcinfo='bash ~/code/ShellCode/PCINFO.sh'

# Start up Program
alias ul='chmod ~/code/Network/ul && ~/code/Network/ul >> ~/Documents/nohup.out &'

# System clean and remove
alias rm='rm -rf'
alias clean='echo "google" | sudo -S aptitude autoclean && sudo aptitude clean'
alias remove='echo "google" | sudo -S apt-get autoremove -y'
alias cleanremove='echo "google" | sudo -S aptitude autoclean && sudo aptitude clean && sudo apt-get autoremove'
alias removeProgram='sudo aptitude purge'

# Tcp display
alias tcpipv4='echo "google" | sudo -S sysctl net.ipv4.tcp_available_congestion_control && sudo sysctl net.ipv4.tcp_congestion_control'
alias tcpbbr='echo "google" | sudo -S lsmod | grep bbr'

# Power OFF
alias reboot='echo "google" | sudo -S reboot'
alias shutdown='echo "google" | sudo -S shutdown -h now'

# Disk
alias fdisk='echo "google" | sudo fdisk -l'

# power
alias chmod='sudo chmod 777'

# Self Monitoring Analysis and Reporting Technology (SMART)
alias smarti='sudo smartctl -i '
alias smarth='sudo smartctl -H '
alias smarta='sudo smartctl -A '
alias smarts='sudo smartctl -s -on '
alias smartall='sudo smartctl -a '
alias smartl='sudo smartctl -l selftest '
alias smartts='sudo smartctl -t short '
alias smarttl='suod smartctl -t long '
alias smartCts='sudo smartctl -C -t short '
alias smartCtl='suod smartctl -C -t long '

# VIM
alias vi='vim'
alias vimPluginInstall='vim +PluginInstall +qall'

# TMUX
alias tnew='tmux new -s session'
alias zz='tmux kill-server'
alias tlst='tmux list-sessions'

# sdcv
alias sv='sdcv'

#Docker alias
alias dkstop='docker container stop'
alias dkstopAll='docker container stop $(docker ps -a -q)'
alias dkrm='docker container rm -f'
alias dkrmAll='docker container rm $(docker ps -a -q)'
alias dkrmi='docker image rm -f'
alias dkps='docker container ps -a'
alias dkimages='docker images && docker system df'
alias dkinfo='docker info'
alias dklogs='docker container logs -f'
alias dkdaemon='echo "google" | sudo -S systemctl daemon-reload && sudo systemctl restart docker'

#Docker-compose alias
alias dcversion='docker-compose version'
alias dcstop='docker-compose stop'
alias dcup='docker-compose up -d'
alias dcdown='docker-compose down'
alias dclogs='docker-compose logs -f'
alias dcrecreate='docker-compose up --force-recreate -d'

#Docker functions
alias docker-pid="sudo docker inspect --format '{{.State.Pid}}'"
alias docker-ip="sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}'"

#Docker-machine alias
alias dm='docker-machine'

#========================================================================================================
echo -e "\033[36m                                                    \033[1m"
echo -e "\033[36m ██████╗  ██████╗  ██████╗  ██████╗ ██╗     ███████╗\033[1m"
echo -e "\033[36m██╔════╝ ██╔═══██╗██╔═══██╗██╔════╝ ██║     ██╔════╝\033[1m"
echo -e "\033[36m██║  ███╗██║   ██║██║   ██║██║  ███╗██║     █████╗  \033[1m"
echo -e "\033[36m██║   ██║██║   ██║██║   ██║██║   ██║██║     ██╔══╝  \033[1m"
echo -e "\033[36m╚██████╔╝╚██████╔╝╚██████╔╝╚██████╔╝███████╗███████ \033[1m"
echo -e "\033[36m ╚═════╝  ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝╚══════╝\033[1m"
echo -e "\033[36m                                                    \033[1m"


