shell 脚本:
# 编写脚本
---------------------------------------------

运行shell脚本：
chmod +x script.sh
./script.sh
---------------------------------------------

echo:
echo $Bash
a=123
echo $a --> 123
echo ‘$a’ --> $a
aa=ls
echo "$aa" --> ls
aa=$(ls)
echo $aa --> Desktop Documents Downloads.....
---------------------------------------------

打印彩色输出:
echo -e "\033[30m 黑色字 \033[0m"	echo -e "\033[40;37m 黑底白字 \033[0m"
echo -e "\033[31m 红色字 \033[0m"	echo -e "\033[41;37m 红底白字 \033[0m"   
echo -e "\033[32m 绿色字 \033[0m"	echo -e "\033[42;37m 绿底白字 \033[0m"
echo -e "\033[33m 黄色字 \033[0m"	echo -e "\033[43;37m 黄底白字 \033[0m"
echo -e "\033[34m 蓝色字 \033[0m"	echo -e "\033[44;37m 蓝底白字 \033[0m"
echo -e "\033[35m 紫色字 \033[0m"	echo -e "\033[45;37m 紫底白字 \033[0m"
echo -e "\033[36m 天蓝字 \033[0m"	echo -e "\033[46;37m 天蓝底白字 \033[0m"
echo -e "\033[37m 白色字 \033[0m"	echo -e "\033[47;30m 白底黑字 \033[0m"

\33[0m 关闭所有属性 
\33[1m 设置高亮度 
\33[4m 下划线 
\33[5m 闪烁 
\33[7m 反显 
\33[8m 消隐 
\33[30m -- \33[37m 设置前景色 
\33[40m -- \33[47m 设置背景色 
\33[nA 光标上移n行 
\33[nB 光标下移n行 
\33[nC 光标右移n行 
\33[nD 光标左移n行 
\33[y;xH设置光标位置 
\33[2J 清屏 
\33[K 清除从光标到行尾的内容 
\33[s 保存光标位置 
\33[u 恢复光标位置 
\33[?25l 隐藏光标 
\33[?25h 显示光标 
---------------------------------------------

printf:
可以格式化字符串, 使用参数同c中printf一样
printf "hello world"
---------------------------------------------

环境变量和变量:
写入环境变量配置文件
vi /home/google/.bashrc
vi root/.bashrc 
#在当前bash环境下读取并执行文件命令
source /home/google/.bashrc

变量赋值(不能出现空格,默认是字符串型)
x=5
name="google"
变量调用
echo $变量名
ech0 $name
变量叠加
x=123
x="$x"456
echo $x
变量删除
unset 变量删除

set -u 命令后系统会明确提示没有变量

设置环境变量
export 变量名=变量值
#查看所有变量
set
#删除环境变量
unset 变量名
#查看所有与此终端进程相关的环境变量
env

#输出PATH环境变量,增加临时环境变量，用:分隔
echo $PATH
#增加PATH变量的值
PATH="$PATH":/root/sh
---------------------------------------------

识别当前shell版本:
echo $SHELL
    /bin/bash
echo $0
    bash
---------------------------------------------

检查是否为超级用户 or 普通用户:
root的UID=0

if [ $UID -ne 0 ]
then
    echo "not root user"
else
    echo "root"
fi
---------------------------------------------


输出重定向：
命令 > 文件：正常输出写到文件中
命令 >> 文件：正常输出追加到文件中
命令 2> 文件：错误信息输出写到文件中
命令 2>> 文件：错误信息输出追加到文件中
命令 &> 文件：正确/错误信息输出写到文件中
命令 &>> 文件：正确/错误信息输出追加到文件中


多命令顺序执行：
命令1 ； 命令2：表示执行1之后执行2
命令1 && 命令2：表示执行1正确之后才执行2
命令1 || 命令2：表示执行1错误之后才执行2


管道符：
命令1 |命令2：将命令1的正确输出作为命令2的操作对象
ls -l /etc | more：相当于more前面的输出


通配符：
？：匹配任何一个字符
*：匹配任意多个字符
[abc]:匹配abc三个字符中任意一个字符的结果，
[0-9]/[a-z]表示一个任意数字/字母，
[^0-9]表示任意非数字
#：表示注释
‘’：单引号仅表示字符串，不对变量转义
“”：对变量进行转义
$用于调用变量的值
``反引号(ESC下面那个键)与$()，引用系统命令
\ 转义符：在\之后的特殊符号失去特殊含义。


#!bin/bash
num1=$1
num2=$@
sum=$(($num1+$num2))
echo $sum


接收键盘输入
read 选项 变量名
-p : 提示信息
-t : 规定时间(秒)
-n : 只接收指定的字符数，才会执行
-s : 隐藏输入的数据,使用于机密


#!/bin/bash
read -p "Please input your name : " -t 60 name

echo $name

read -p "Please input your password : " -s password
echo -e "\n"
echo $password

read -p "Please input your sex : " -n 1 sex
echo -e "\n"
echo $sex

==============================================================

shell变量的缺点，是个弱类型，默认是字符串类型的，不能进行数学运算

declare命令
1、declare声明变量类型
declare [+/-] [选项] 变量名
- 给变量设定类型属性
+ 取消变量的类型属性
-a 数组型
-i 整数型
-x 环境变量
-p 显示指定变量的被声明的类型

a=1
b=2
declare -i c=$a+$b
echo $c

w=$(($a+$b))   #推荐
echo $w


判断文件类型,常用的3个:
-d 判断该文件是否存在,并且是否为目录文件(是目录为真)
-e 判断该文件是否存在 (存在为真)
-f 判断该文件是否存在,并且是否为普通文件(是普通文件为真)
[ -e /root/install.log ] && echo yes || echo no
#注意空格

-r：判断该文件是否存在，并且是否该文件拥有读权限
-w：判断该文件是否存在，并且是否该文件拥有写权限
-x：判断该文件是否存在，并且是否该文件拥有执行权限
[ -w /home/google/test.sh ] && echo yes || echo no
#注意空格


num1 -eq num2：判断整数1是否和整数2相等
num1 -ne num2：判断整数1是否和整数2不相等
num1 -gt num2：判断整数1是否大于整数2
num1 -lt num2：判断整数1是否小于整数2
num1 -ge num2：判断整数1是否大于或等于整数2
num1 -le num2：判断整数1是否小于或等于整数2
[ 23 -ge 22 ] && echo "yes"||echo "no" 
#注意空格


字符串判断
-z 字符串 #判断是否为空，为空返回真
-n 字符串 #判断是否为非空，非空返回真
字符串1 = = 字符串2 #判断字符串是否相等，相等返回真
字符串1 != 字符串2 #判断字符串是否不等，不等返回真
a="3"
[ -z "$a" ] && echo yes || echo no
b=22
[ "$a" == "$b" ] && echo "yes" || echo "no"



#!/bin/bash
if [ 条件 ]
   then
   程序
fi


#!/bin/bash
if [ 条件 ]
   then
   条件成立
   else
   条件不成立
fi


if [ 条件判断式1 ]
    then
        当条件判断式1成立时，执行程序1
elif [ 条件判断式2 ]
    then
        当条件判断式2成立时，执行程序2
…省略更多条件…
else
        当所有条件都不成立时，最后执行此程序
fi


case $变量名 in
  "值1")
       如果变量值等于值1，执行程序1
       ;;
  "值2")
       如果变量值等于值2，执行程序2
       ;;
  ……
  ……
   *）
      如果变量值都不是以上值，则执行此程序
      ;;
esac
#与if多分支最大区别是，case语句只能判断一种条件关系，而if语句可以判断多种条件关系


for 变量 in 值1 值2 值3... 
  do
     程序
  done
#in后面跟多少值，for循环就循环多少次，每次循环依次把值赋给变量，直到后面的值全都运行一遍。





