fs.file-max = 51200
#提高整个系统的文件限制
# 系统所有进程一共可以打开的句柄数 (bytes) 

kernel.msgmnb = 65536 
# 进程通讯消息队列的最大字节数 (bytes) 

kernel.msgmax = 65536 
# 进程通讯消息队列单条数据最大的长度 (bytes) 

kernel.shmmax = 68719476736 
# 内核允许的最大共享内存大小 (bytes) 

kernel.shmall = 4294967296 
# 任意时间内系统可以使用的共享内存总量 (bytes)

# increase the length of the processor input queue
net.core.netdev_max_backlog = 400000
#该参数决定了，网络设备接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。
# max processor input queue

net.core.optmem_max = 10000000
#该参数指定了每个套接字所允许的最大缓冲区的大小

net.core.rmem_default = 10000000
#指定了接收套接字缓冲区大小的缺省值（以字节为单位）。
# default read buffer

# increase TCP max buffer size settable using setsockopt()
net.core.rmem_max = 67108864 
# 设置内核接收 Socket 的最大长度 (bytes)
#指定了接收套接字缓冲区大小的最大值（以字节为单位）。

net.core.wmem_max = 67108864
#定义发送窗口的最大大小；对于更大的 BDP 来说，这个大小也应该更大。
# 设置内核发送 Socket 的最大长度 (bytes)

net.core.somaxconn = 100000
#linux kernel参数，表示socket监听的backlog(监听队列)上限
# max backlog

net.core.wmem_default = 11059200
#定义默认的发送窗口大小；对于更大的 BDP 来说，这个大小也应该更大。
# default write buffer

net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
# 拒绝接收来自 IPv4 的 ICMP 重定向消息，保证安全性

net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.lo.send_redirects = 0
# 禁止发送在 IPv4 下的 ICMP 重定向消息，保证安全性

net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.default.rp_filter = 0
net.ipv4.conf.lo.rp_filter = 0
#严谨模式 1 (推荐)
#松散模式 0
# 关闭反向路径回溯进行源地址验证 (RFC1812)，提高性能

net.ipv4.tcp_window_scaling = 0
#关闭tcp_window_scaling
##启用 RFC 1323 定义的 window scaling；要支持超过 64KB 的窗口，必须启用该值。

net.ipv4.tcp_ecn = 0
#把TCP的直接拥塞通告(tcp_ecn)关掉

net.ipv4.tcp_sack = 1
#关闭tcp_sack
##启用有选择的应答（Selective Acknowledgment），
##这可以通过有选择地应答乱序接收到的报文来提高性能（这样可以让发送者只发送丢失的报文段）；
##（对于广域网通信来说）这个选项应该启用，但是这会增加对 CPU 的占用。

net.ipv4.tcp_max_tw_buckets = 10000
#表示系统同时保持TIME_WAIT的最大数量，如果超过这个数字，TIME_WAIT将立刻被清除并打印警告信息。

net.ipv4.tcp_max_syn_backlog = 8192
#表示SYN队列长度，默认1024，改成8192，可以容纳更多等待连接的网络连接数。

net.ipv4.ip_forward = 1
# 开启所有网络设备的 IPv4 流量转发，用于支持 IPv4 的正常访问

net.ipv4.tcp_syncookies = 1
#表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；

net.ipv4.tcp_timestamps = 1
#开启TCP时间戳
#以一种比重发超时更精确的方法（请参阅 RFC 1323）来启用对 RTT 的计算；为了实现更好的性能应该启用这个选项

net.ipv4.tcp_tw_reuse = 1
#表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；

#除非得到技术专家的建议,请不要随意修改这个值默认是0。
#net.ipv4.tcp_tw_recycle = 1
#表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。

net.ipv4.tcp_fin_timeout = 30
#表示如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2状态的时间。# FIN_WAIT 超时时间。
# 设置客户端断开 Sockets 连接后 TCP 在 FIN 等待状态的实际 (s)，保证性能
 
net.ipv4.tcp_keepalive_time = 1200
#表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。
# 设置 TCP 发送 keepalive 数据包的频率，影响 TCP 链接保留时间 (s)，保证性能
 
net.ipv4.tcp_keepalive_probes = 3
#如果对方不予应答，探测包的发送次数
 
net.ipv4.tcp_keepalive_intvl = 15
#keepalive探测包的发送间隔
 
net.ipv4.tcp_mem = 25600 51200 102400
#确定 TCP 栈应该如何反映内存使用；每个值的单位都是内存页（通常是 4KB）。
#第一个值是内存使用的下限。
#第二个值是内存压力模式开始对缓冲区使用应用压力的上限。
#第三个值是内存上限。在这个层次上可以将报文丢弃，从而减少对内存的使用。对于较大的 BDP 可以增大这些值（但是要记住，其单位是内存页，而不是字节）。
 
# increase Linux autotuning TCP buffer limit
net.ipv4.tcp_rmem = 4096 87380 67108864
# 设置 TCP Socket 接收长度的最小值，预留值，最大值 (bytes)
#与 tcp_wmem 类似，不过它表示的是为自动调优所使用的接收缓冲区的值。
 
net.ipv4.tcp_wmem = 30000000 30000000 67108864
# 设置 TCP Socket 发送长度的最小值，预留值，最大值 (bytes)
#net.ipv4.tcp_wmem = 4096 65536 67108864
#为自动调优定义每个 socket 使用的内存。
#第一个值是为 socket 的发送缓冲区分配的最少字节数。
#第二个值是默认值（该值会被 wmem_default 覆盖），缓冲区在系统负载不重的情况下可以增长到这个值。
#第三个值是发送缓冲区空间的最大字节数（该值会被 wmem_max 覆盖）。
 
net.ipv4.ip_local_port_range = 10000 65000
#表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为10000到65000。
#（注意：这里不要将最低值设的太低，否则可能会占用掉正常的端口！）
 
net.ipv4.tcp_slow_start_after_idle = 0
#关闭tcp的连接传输的慢启动，即先休止一段时间，再初始化拥塞窗口。
 
net.ipv4.route.gc_timeout = 100
#路由缓存刷新频率，当一个路由失败后多长时间跳到另一个路由，默认是300。

#下面两个值定义了SYN的重试次数，默认5，重试次数减少可防范少量SYN攻击。
net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_syn_retries = 1
#在内核放弃建立连接之前发送SYN包的数量。
 
net.ipv4.icmp_echo_ignore_broadcasts = 1
# 避免放大攻击
# 忽略所有 ICMP ECHO 请求的广播，保证安全性
 
net.ipv4.icmp_ignore_bogus_error_responses = 1
# 开启恶意icmp错误消息保护
# 忽略违背 RFC1122 标准的伪造广播帧，保证安全性

net.ipv4.conf.all.accept_source_route = 1
net.ipv4.conf.default.accept_source_route = 1
#是否接受含有源路由信息的ip包。参数值为布尔值，1表示接受，0表示不接受。
#在充当网关的linux主机上缺省值为1，在一般的linux主机上缺省值为0。
# 允许接收 IPv4 环境下带有路由信息的数据包，保证安全性


net.ipv4.tcp_fastopen = 3
#额外的，对于内核版本新于**3.7.1**的
# 开启tcp-fast-open

# recommended for hosts with jumbo frames enabled
net.ipv4.tcp_mtu_probing=1
# 开启 TCP 层的 MTU 主动探测，提高网络速度	

net.ipv4.tcp_congestion_control = htcp
#默认推荐设置是 htcp

#设置TCP拥塞算法为 hybla
net.ipv4.tcp_congestion_control=hybla

#net.ipv4.ip_conntrack_max = 10240
#系统对最大跟踪的TCP连接数限制设置为10240。请注意，此限制值要尽量小，以节省对内核内存的占用

#net.ipv4.netfilter.ip_conntrack_max=20480
#设置系统对最大跟踪的TCP连接数的限制

#开启TCP BBR拥堵控制算法
net.ipv4.tcp_congestion_control = bbr

# 将网络拥塞队列算法设置为性能和延迟最佳的 fq_codel
net.core.default_qdisc=fq

net.ipv6.conf.all.accept_source_route = 1
net.ipv6.conf.default.accept_source_route = 1
# 允许接收 IPv6 环境下带有路由信息的数据包，保证安全性

net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
# 禁止接收来自 IPv6 下的 ICMPv6 重定向消息，保证安全性

net.ipv6.conf.all.autoconf = 1
# 开启自动设定本地连接地址，用于支持 IPv6 地址的正常分配

net.ipv6.conf.all.forwarding = 1
# 开启所有网络设备的 IPv6 流量转发，用于支持 IPv6 的正常访问

vm.swappiness=0
#swappiness=0 表示最大限度使用物理内存
#swappiness＝100 表示最大限度使用swap分区
#cat /proc/sys/vm/swappiness 查看swappiness参数值
#free -m 查看系统当前SWAP空间大小
#swapon -s 验证swap状态
