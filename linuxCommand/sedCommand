# double space a file 
#使一个文件中每一行都占用两行空间(就是在每一行后边插一行空行)
sed G
###sed 中G命令的解释为append hold space to pattern space. 
###就是在当前位置后加一行保留空间中的内容，无任何动作时，保留空间为空行

# double space a file which already has blank lines in it. Output file 
# should contain no more than one blank line between lines of text. 
#假若文件已经含有空白行在其中，使一个文件中每一行占用两行
#输出文件中文本行之间不含有超过一行的空行
sed '/^$/d;G'   
###先用sed  '/^$/d'  查找并删除空行；然后用 sed G插入空行

# triple space a file 
#使一个文件中每一行都占用三行空间(就是在每一行后边插两行空行)
sed 'G;G' 

# undo double-spacing (assumes even-numbered lines are always blank)
#撤销占用两行空间的操作(假设偶数行都是空白行)
sed 'n;d' 
###sed 中命令n的解释为Read　the next line of input into the pattern space

# insert a blank line above every line which matches "regex"
#在每个含有字符串regex的行上插入一行空白行 
sed '/regex/{x;p;x;}' 
###sed 中命令x解释为Exchange the contents of the hold and pattern spaces
###交换保留空间与模式空间的内容
###sed 中命令p为Print the current pattern space．就是打印模式空间中的内容
###所以理解为保留空间中开始为空行，模式空间中经过sed  '/regex/'查询后为包含regex内容的那一行
###1)x;交换模式空间和保留空间的内容，此时模式空间中内容为空行，保留空间中内容为含有regex内容的行
###2)p；命令打印模式空间内容(空行)在原文中含有regex内容的那一行的位置出现两行空行，其中后一行为模式空间中的内容
###3)x;后交换模式空间和保留空间中的内容
###4)结果就是在原来出现regex的位置前一行加入了一行空行

# insert a blank line below every line which matches "regex"
# 在每个含有字符串regex的行下插入一行空白行
sed '/regex/G'

# insert a blank line above and below every line which matches "regex" 
#在每个含有字符串regex的行上，下各插入一行空白行
sed '/regex/{x;p;x;G;}' 

#Attempt to match regexp against the pattern space.If successful,replace that portion matched with 
sed 's/regexp/replacement/' 
# substitute (ind and replace)"foo" with "bar" on each line
#在每一行中用"bar"替换(找并替换)foo"
sed 's/foo/bar/' 
# replaces only 1st instance in a line 
# 在一行中，仅在第一次出现时替换
sed 's/foo/bar/4' 
# replaces only 4th instance in a line 
#在一行中，仅在第四次出现时替换
sed 's/foo/bar/g' 
# replaces ALL instances in a line
#在一行中替换所有出现的值 
# substitute "foo" with "bar" ONLY for lines which contain "baz" 
#在每一含有"baz"的行中用"bar"替换(查找并替换)foo"
sed '/baz/s/foo/bar/g' 
### /baz/用来查找，后边的用来替换
# substitute "foo" with "bar" EXCEPT for lines which contain "baz" 
#在每一不含有"baz"的行中用"bar"替换(找并替换)foo"
sed '/baz/!s/foo/bar/g'
# change "scarlet" or "ruby" or "puce" to "red" 
#将"scarlet"或者"ruby"或者"puce"替换成"red"
sed 's/scarlet/red/g;s/ruby/red/g;s/puce/red/g' 


###意思是在模式空间外匹配regexp，如果成功，使用匹配replacement的内容替换regexp
###\n是换行符,\t是TAB制表符
###sed中命令N的解释为Append the next line of input into the pattern space
###也就是把当前行后一行的内容加在当前行后边

# count lines (emulates "wc -l")
#统计行数(类似于 "wc -l")
sed -n '$=' 
#sed中参数n的含义是suppress automatic printing of pattern space,也就是限制
###自动打印模式空间中内容的功能， '$='中$的含义是Match the last line
###匹配最后一行而且只打印行号不打印内容

# delete leading whitespace (spaces, tabs)from front of each line 
# aligns all text flush left 
#删除每一行开头的空白(空格，TAB)左对齐排列全文
sed 's/^[ \t]*//' 
# see note on '\t' at end of file
### ^[ \t]* 的含义为以空格或者TAB键开始的(或者是他们的组合)行

# delete trailing whitespace (spaces, tabs)from end of each line
#从每一行结尾处删除最后的空格(空格,TAB)
sed 's/[ \t]*$//'
# see note on '\t' at end of file 

# delete BOTH leading and trailing whitespace from each line
#删除每一行的开头和结尾的空格 
sed 's/^[ \t]*//;s/[ \t]*$//'

# insert 5 blank spaces at beginning of each line (ake page offset)
#在每一行开始处插入5个空格(整页偏移)
sed -i 's/^/     /' test


# delete duplicate, consecutive lines from a file (emulates "uniq") 
# First line in a set of duplicate lines is kept, rest are deleted. 
#删除文件中重复的连续的行(似于"uniq"命令)
#重复行中第一行保留，其他删除

# 删除匹配式样的行
sed '/pattern/d' 
# 删除含pattern的行。当然pattern
# 可以换成任何有效的正则表达式





































