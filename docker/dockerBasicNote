docker镜像和容器的默认存放位置为:/var/lib/docker

docker --version                                                         # 检测docker版本

docker login                                                             # 使用您的Docker凭证登录此CLI会话

-------------------------------------------------------------------------------------
docker container run
-------------------------------------------------------------------------------------
docker container run --name ubuntu -p 5000:5000 -v /dateVolume -t -i --rm ubuntu:17.10
docker container run --name ubuntu -v /home/google/dateValue:/dateValue -t -i --rm ubuntu:17.10
docker container run --name dbdata -v /dbdata -d ubuntu:17.10
docker container run --name db1 --volumes-from dbdata -it --rm ubuntu:17.10
-i : 让容器的标准输入保持打开
-t : 让Docker分配一个伪终端(pseudo-tty)并绑定到容器的标准输入上
-d : 容器会在后台运行并不会把输出的结果打印到宿主机上面,启动后会返回一个唯一的id(注意 : --rm和-d不能共用)
-v : 标记创建一个数据卷并挂载到容器里,也可以指定挂载一个本地主机的目录到容器中
-P : Docker 会随机映射一个49000~49900的端口到内部容器开放的网络端口
-p : 指定要映射的端口,并且,在一个指定端口上只可以绑定一个容器,并且可以多次使用来绑定多个端口
格式有 : ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort
--rm : 容器在终止后会立刻删除,不需要排障和保留结果,可以避免浪费空间
--name : 为容器自定义命名
--volumes-from : 指定从多个容器挂载不同的数据卷,也可以从其他已经挂载了数据卷的容器来级联挂载数据卷
注意:使用--volumes-from参数所挂载数据卷的容器自己并不需要保持在运行状态
-------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------
docker image command
-------------------------------------------------------------------------------------
docker images                                                            # 列出所有顶级镜像
docker system df                                                         # 查看镜像、容器、数据卷所占用的空间(Docker 1.13+)
docker images -f dangling=true                                           # 虚悬镜像(无标签镜像:仓库名,标签均为<none>)
docker images -a                                                         # 显示包括中间层镜像在内的所有镜像
docker images <ImageName>                                                # 根据仓库名列出镜像
docker images -q                                                         # 列出所有的虚悬镜像的 ID
docker images --format "{{.ID}}: {{.Repository}}"                        # 列出镜像结果(只包含镜像ID和仓库名)
docker images --format "table {{.ID}}\t{{.Repository}}\t{{.Tag}}"        # 以表格等距显示,并且有标题行
docker image rm <Image>                                                  # 删除镜像
docker rmi $(docker images -q -f dangling=true)                          # 删除虚悬镜像
docker image prune                                                       # 删除虚悬镜像(Docker 1.13+)
docker image inspect <ImageName>                                         # 查看镜像的底层信息
docker tag <ImageID> <ImageName>                                         # 修改镜像名称
docker image build -t <ImageName>:<Tags> .                               # 构建镜像
(注:并非在本地构建,而是Docker引擎中构建的, . 是在指定上下文的目录)(docker 1.13+)
-------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------
docker container
-------------------------------------------------------------------------------------
docker container ps                                                      # 查看正在运行的容器列表
docker container ps -a                                                   # 查看所有容器的列表,甚至包含未运行的容器
docker container logs <CONTAINER ID or NAMES>                            # 获取容器的输出日志信息
docker container start <CONTAINER ID or NAMES>                           # 启动已终止容器
docker container stop <CONTAINER ID or NAMES>                            # 终止容器
docker container stop $(docker ps -a -q)                                 # 终止所有容器
docker container restart <CONTAINER ID or NAMES>                         # 将一个运行态的容器终止,然后再重新启动它
docker container attach <CONTAINER ID or NAMES>                          # 进入容器
exit(Ctrl + D)                                                           # 退出容器
docker-pid <CONTAINER ID>                                                # 获取某个容器的PID
docker-enter <CONTAINER ID>                                              # 进入容器或直接在容器内执行命令
docker container export <CONTAINER ID> > <CONTAINER>.tar                 # 将导出容器快照到本地文件
cat <CONTAINER>.tar | docker image import - <Address><Reposiotry>:<Tags> # 将容器快照文件中再导入为镜像
docker container rm <CONTAINER ID or NAMES>                              # 删除一个处于终止状态的容器
docker container rm -f <CONTAINER ID or NAMES>                           # 删除一个运行中的容器
docker container rm $(docker ps -a -q)                                   # 清理所有处于终止状态的容器
docker container rm -v <CONTAINER ID or NAMES>                           # 删除数据卷容器
docker container prune                                                   # 清理所有处于终止状态的容器
docker diff <Container>                                                  # 改动容器的存储层,查看具体的改动
docker container inspect <CONTAINER ID or NAMES>                         # 查看指定容器的信息
-------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------
docker repositry
-------------------------------------------------------------------------------------
docker pull [Docker Registry Address]<Reposiotry>:<Tags>                 # 从Docker Registry获取镜像
-------------------------------------------------------------------------------------




